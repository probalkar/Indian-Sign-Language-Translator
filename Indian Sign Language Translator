{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3608858,"sourceType":"datasetVersion","datasetId":2163304}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-21T11:44:40.069988Z","iopub.execute_input":"2024-04-21T11:44:40.070648Z","iopub.status.idle":"2024-04-21T11:44:50.271223Z","shell.execute_reply.started":"2024-04-21T11:44:40.070617Z","shell.execute_reply":"2024-04-21T11:44:50.270255Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install tensorflow --upgrade","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:44:50.273359Z","iopub.execute_input":"2024-04-21T11:44:50.274311Z","iopub.status.idle":"2024-04-21T11:45:55.883216Z","shell.execute_reply.started":"2024-04-21T11:44:50.274275Z","shell.execute_reply":"2024-04-21T11:45:55.882252Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense\nfrom tensorflow.keras.models import Model","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:45:55.884532Z","iopub.execute_input":"2024-04-21T11:45:55.884815Z","iopub.status.idle":"2024-04-21T11:46:01.456129Z","shell.execute_reply.started":"2024-04-21T11:45:55.884787Z","shell.execute_reply":"2024-04-21T11:46:01.455256Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Data Preprocessing\ndata_dir = '/kaggle/input/indian-sign-language-islrtc-referred/original_images'\nimg_width, img_height = 224, 224\ninput_shape = (img_width, img_height, 3)  # assuming RGB images\nbatch_size = 32\nepochs = 10","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:47:09.721481Z","iopub.execute_input":"2024-04-21T11:47:09.722164Z","iopub.status.idle":"2024-04-21T11:47:09.727077Z","shell.execute_reply.started":"2024-04-21T11:47:09.722132Z","shell.execute_reply":"2024-04-21T11:47:09.726015Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Data Augmentation\ndatagen = ImageDataGenerator(\n    rescale=1./255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    validation_split=0.2)  # Splitting 80% for training, 20% for validation","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:47:10.944058Z","iopub.execute_input":"2024-04-21T11:47:10.944416Z","iopub.status.idle":"2024-04-21T11:47:10.949348Z","shell.execute_reply.started":"2024-04-21T11:47:10.944389Z","shell.execute_reply":"2024-04-21T11:47:10.948354Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load and Augment Data\ntrain_generator = datagen.flow_from_directory(\n    data_dir,\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    class_mode='categorical',\n    subset='training')  # Use subset parameter for training data\n\nvalidation_generator = datagen.flow_from_directory(\n    data_dir,\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    class_mode='categorical',\n    subset='validation')  # Use subset parameter for validation data","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:47:11.163263Z","iopub.execute_input":"2024-04-21T11:47:11.163957Z","iopub.status.idle":"2024-04-21T11:47:12.912624Z","shell.execute_reply.started":"2024-04-21T11:47:11.163927Z","shell.execute_reply":"2024-04-21T11:47:12.911350Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load Pre-trained Model (MobileNetV2)\nbase_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=input_shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:47:12.914188Z","iopub.execute_input":"2024-04-21T11:47:12.914455Z","iopub.status.idle":"2024-04-21T11:47:13.673562Z","shell.execute_reply.started":"2024-04-21T11:47:12.914431Z","shell.execute_reply":"2024-04-21T11:47:13.672688Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Freeze base model layers\nfor layer in base_model.layers:\n    layer.trainable = False","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:47:13.674954Z","iopub.execute_input":"2024-04-21T11:47:13.675362Z","iopub.status.idle":"2024-04-21T11:47:13.685156Z","shell.execute_reply.started":"2024-04-21T11:47:13.675321Z","shell.execute_reply":"2024-04-21T11:47:13.684115Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Add custom classifier\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(128, activation='relu')(x)\npredictions = Dense(36, activation='softmax')(x)  # 36 classes (10 digits + 26 alphabets)\nmodel = Model(inputs=base_model.input, outputs=predictions)","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:47:13.687994Z","iopub.execute_input":"2024-04-21T11:47:13.688378Z","iopub.status.idle":"2024-04-21T11:47:13.734729Z","shell.execute_reply.started":"2024-04-21T11:47:13.688345Z","shell.execute_reply":"2024-04-21T11:47:13.734070Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Compile the Model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:47:13.735691Z","iopub.execute_input":"2024-04-21T11:47:13.735938Z","iopub.status.idle":"2024-04-21T11:47:13.744642Z","shell.execute_reply.started":"2024-04-21T11:47:13.735916Z","shell.execute_reply":"2024-04-21T11:47:13.743806Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train the Model\nmodel.fit(\n    train_generator,\n    epochs=epochs,\n    validation_data=validation_generator)","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:47:13.745803Z","iopub.execute_input":"2024-04-21T11:47:13.746040Z","iopub.status.idle":"2024-04-21T13:11:36.582182Z","shell.execute_reply.started":"2024-04-21T11:47:13.746020Z","shell.execute_reply":"2024-04-21T13:11:36.581406Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.save(\"model.h5\")","metadata":{"execution":{"iopub.status.busy":"2024-04-21T13:24:09.271821Z","iopub.execute_input":"2024-04-21T13:24:09.272213Z","iopub.status.idle":"2024-04-21T13:24:09.566277Z","shell.execute_reply.started":"2024-04-21T13:24:09.272183Z","shell.execute_reply":"2024-04-21T13:24:09.565505Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}